# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_control/BotState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BotState(genpy.Message):
  _md5sum = "7c4f0cdb28a766b1ae745e458f106a17"
  _type = "robot_control/BotState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool mode_changed
bool sign_mode_changed
bool test_started
bool depth_fixed
bool record_init
string mode_name 
string sign_mode_name
string subject_name
string simulator_name
string test_shape
float32 depth
float32 max_angle
float32 latest_rmse
string info
"""
  __slots__ = ['mode_changed','sign_mode_changed','test_started','depth_fixed','record_init','mode_name','sign_mode_name','subject_name','simulator_name','test_shape','depth','max_angle','latest_rmse','info']
  _slot_types = ['bool','bool','bool','bool','bool','string','string','string','string','string','float32','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode_changed,sign_mode_changed,test_started,depth_fixed,record_init,mode_name,sign_mode_name,subject_name,simulator_name,test_shape,depth,max_angle,latest_rmse,info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BotState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mode_changed is None:
        self.mode_changed = False
      if self.sign_mode_changed is None:
        self.sign_mode_changed = False
      if self.test_started is None:
        self.test_started = False
      if self.depth_fixed is None:
        self.depth_fixed = False
      if self.record_init is None:
        self.record_init = False
      if self.mode_name is None:
        self.mode_name = ''
      if self.sign_mode_name is None:
        self.sign_mode_name = ''
      if self.subject_name is None:
        self.subject_name = ''
      if self.simulator_name is None:
        self.simulator_name = ''
      if self.test_shape is None:
        self.test_shape = ''
      if self.depth is None:
        self.depth = 0.
      if self.max_angle is None:
        self.max_angle = 0.
      if self.latest_rmse is None:
        self.latest_rmse = 0.
      if self.info is None:
        self.info = ''
    else:
      self.mode_changed = False
      self.sign_mode_changed = False
      self.test_started = False
      self.depth_fixed = False
      self.record_init = False
      self.mode_name = ''
      self.sign_mode_name = ''
      self.subject_name = ''
      self.simulator_name = ''
      self.test_shape = ''
      self.depth = 0.
      self.max_angle = 0.
      self.latest_rmse = 0.
      self.info = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.mode_changed, _x.sign_mode_changed, _x.test_started, _x.depth_fixed, _x.record_init))
      _x = self.mode_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sign_mode_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subject_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.simulator_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.test_shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.depth, _x.max_angle, _x.latest_rmse))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.mode_changed, _x.sign_mode_changed, _x.test_started, _x.depth_fixed, _x.record_init,) = _get_struct_5B().unpack(str[start:end])
      self.mode_changed = bool(self.mode_changed)
      self.sign_mode_changed = bool(self.sign_mode_changed)
      self.test_started = bool(self.test_started)
      self.depth_fixed = bool(self.depth_fixed)
      self.record_init = bool(self.record_init)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sign_mode_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sign_mode_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subject_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subject_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.simulator_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.simulator_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.test_shape = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.test_shape = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.depth, _x.max_angle, _x.latest_rmse,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.mode_changed, _x.sign_mode_changed, _x.test_started, _x.depth_fixed, _x.record_init))
      _x = self.mode_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sign_mode_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subject_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.simulator_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.test_shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.depth, _x.max_angle, _x.latest_rmse))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.mode_changed, _x.sign_mode_changed, _x.test_started, _x.depth_fixed, _x.record_init,) = _get_struct_5B().unpack(str[start:end])
      self.mode_changed = bool(self.mode_changed)
      self.sign_mode_changed = bool(self.sign_mode_changed)
      self.test_started = bool(self.test_started)
      self.depth_fixed = bool(self.depth_fixed)
      self.record_init = bool(self.record_init)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sign_mode_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sign_mode_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subject_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subject_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.simulator_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.simulator_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.test_shape = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.test_shape = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.depth, _x.max_angle, _x.latest_rmse,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
