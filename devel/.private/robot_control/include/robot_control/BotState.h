// Generated by gencpp from file robot_control/BotState.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MESSAGE_BOTSTATE_H
#define ROBOT_CONTROL_MESSAGE_BOTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control
{
template <class ContainerAllocator>
struct BotState_
{
  typedef BotState_<ContainerAllocator> Type;

  BotState_()
    : mode_changed(false)
    , sign_mode_changed(false)
    , test_started(false)
    , depth_fixed(false)
    , record_init(false)
    , mode_name()
    , sign_mode_name()
    , subject_name()
    , simulator_name()
    , test_shape()
    , depth(0.0)
    , max_angle(0.0)
    , latest_rmse(0.0)
    , info()  {
    }
  BotState_(const ContainerAllocator& _alloc)
    : mode_changed(false)
    , sign_mode_changed(false)
    , test_started(false)
    , depth_fixed(false)
    , record_init(false)
    , mode_name(_alloc)
    , sign_mode_name(_alloc)
    , subject_name(_alloc)
    , simulator_name(_alloc)
    , test_shape(_alloc)
    , depth(0.0)
    , max_angle(0.0)
    , latest_rmse(0.0)
    , info(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_changed_type;
  _mode_changed_type mode_changed;

   typedef uint8_t _sign_mode_changed_type;
  _sign_mode_changed_type sign_mode_changed;

   typedef uint8_t _test_started_type;
  _test_started_type test_started;

   typedef uint8_t _depth_fixed_type;
  _depth_fixed_type depth_fixed;

   typedef uint8_t _record_init_type;
  _record_init_type record_init;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_name_type;
  _mode_name_type mode_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sign_mode_name_type;
  _sign_mode_name_type sign_mode_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _subject_name_type;
  _subject_name_type subject_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _simulator_name_type;
  _simulator_name_type simulator_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _test_shape_type;
  _test_shape_type test_shape;

   typedef float _depth_type;
  _depth_type depth;

   typedef float _max_angle_type;
  _max_angle_type max_angle;

   typedef float _latest_rmse_type;
  _latest_rmse_type latest_rmse;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _info_type;
  _info_type info;





  typedef boost::shared_ptr< ::robot_control::BotState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::BotState_<ContainerAllocator> const> ConstPtr;

}; // struct BotState_

typedef ::robot_control::BotState_<std::allocator<void> > BotState;

typedef boost::shared_ptr< ::robot_control::BotState > BotStatePtr;
typedef boost::shared_ptr< ::robot_control::BotState const> BotStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control::BotState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control::BotState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control::BotState_<ContainerAllocator1> & lhs, const ::robot_control::BotState_<ContainerAllocator2> & rhs)
{
  return lhs.mode_changed == rhs.mode_changed &&
    lhs.sign_mode_changed == rhs.sign_mode_changed &&
    lhs.test_started == rhs.test_started &&
    lhs.depth_fixed == rhs.depth_fixed &&
    lhs.record_init == rhs.record_init &&
    lhs.mode_name == rhs.mode_name &&
    lhs.sign_mode_name == rhs.sign_mode_name &&
    lhs.subject_name == rhs.subject_name &&
    lhs.simulator_name == rhs.simulator_name &&
    lhs.test_shape == rhs.test_shape &&
    lhs.depth == rhs.depth &&
    lhs.max_angle == rhs.max_angle &&
    lhs.latest_rmse == rhs.latest_rmse &&
    lhs.info == rhs.info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control::BotState_<ContainerAllocator1> & lhs, const ::robot_control::BotState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_control::BotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::BotState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::BotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::BotState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::BotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::BotState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control::BotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c4f0cdb28a766b1ae745e458f106a17";
  }

  static const char* value(const ::robot_control::BotState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c4f0cdb28a766b1ULL;
  static const uint64_t static_value2 = 0xae745e458f106a17ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::BotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control/BotState";
  }

  static const char* value(const ::robot_control::BotState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control::BotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool mode_changed\n"
"bool sign_mode_changed\n"
"bool test_started\n"
"bool depth_fixed\n"
"bool record_init\n"
"string mode_name \n"
"string sign_mode_name\n"
"string subject_name\n"
"string simulator_name\n"
"string test_shape\n"
"float32 depth\n"
"float32 max_angle\n"
"float32 latest_rmse\n"
"string info\n"
;
  }

  static const char* value(const ::robot_control::BotState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control::BotState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode_changed);
      stream.next(m.sign_mode_changed);
      stream.next(m.test_started);
      stream.next(m.depth_fixed);
      stream.next(m.record_init);
      stream.next(m.mode_name);
      stream.next(m.sign_mode_name);
      stream.next(m.subject_name);
      stream.next(m.simulator_name);
      stream.next(m.test_shape);
      stream.next(m.depth);
      stream.next(m.max_angle);
      stream.next(m.latest_rmse);
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BotState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control::BotState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control::BotState_<ContainerAllocator>& v)
  {
    s << indent << "mode_changed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode_changed);
    s << indent << "sign_mode_changed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sign_mode_changed);
    s << indent << "test_started: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.test_started);
    s << indent << "depth_fixed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.depth_fixed);
    s << indent << "record_init: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.record_init);
    s << indent << "mode_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode_name);
    s << indent << "sign_mode_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sign_mode_name);
    s << indent << "subject_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.subject_name);
    s << indent << "simulator_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.simulator_name);
    s << indent << "test_shape: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.test_shape);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
    s << indent << "max_angle: ";
    Printer<float>::stream(s, indent + "  ", v.max_angle);
    s << indent << "latest_rmse: ";
    Printer<float>::stream(s, indent + "  ", v.latest_rmse);
    s << indent << "info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MESSAGE_BOTSTATE_H
