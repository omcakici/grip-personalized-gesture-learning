// Generated by gencpp from file robot_control/GuiCmd.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MESSAGE_GUICMD_H
#define ROBOT_CONTROL_MESSAGE_GUICMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control
{
template <class ContainerAllocator>
struct GuiCmd_
{
  typedef GuiCmd_<ContainerAllocator> Type;

  GuiCmd_()
    : cmd()
    , shape()
    , shape_mod()
    , obj()
    , args()  {
    }
  GuiCmd_(const ContainerAllocator& _alloc)
    : cmd(_alloc)
    , shape(_alloc)
    , shape_mod(_alloc)
    , obj(_alloc)
    , args(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cmd_type;
  _cmd_type cmd;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _shape_type;
  _shape_type shape;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _shape_mod_type;
  _shape_mod_type shape_mod;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _obj_type;
  _obj_type obj;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _args_type;
  _args_type args;





  typedef boost::shared_ptr< ::robot_control::GuiCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::GuiCmd_<ContainerAllocator> const> ConstPtr;

}; // struct GuiCmd_

typedef ::robot_control::GuiCmd_<std::allocator<void> > GuiCmd;

typedef boost::shared_ptr< ::robot_control::GuiCmd > GuiCmdPtr;
typedef boost::shared_ptr< ::robot_control::GuiCmd const> GuiCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control::GuiCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control::GuiCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control::GuiCmd_<ContainerAllocator1> & lhs, const ::robot_control::GuiCmd_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.shape == rhs.shape &&
    lhs.shape_mod == rhs.shape_mod &&
    lhs.obj == rhs.obj &&
    lhs.args == rhs.args;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control::GuiCmd_<ContainerAllocator1> & lhs, const ::robot_control::GuiCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_control::GuiCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::GuiCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::GuiCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::GuiCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::GuiCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::GuiCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control::GuiCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebea78b44dfee6d2c22e443dcfe0f057";
  }

  static const char* value(const ::robot_control::GuiCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebea78b44dfee6d2ULL;
  static const uint64_t static_value2 = 0xc22e443dcfe0f057ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::GuiCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control/GuiCmd";
  }

  static const char* value(const ::robot_control::GuiCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control::GuiCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string cmd \n"
"string shape\n"
"string shape_mod\n"
"string obj\n"
"string args\n"
;
  }

  static const char* value(const ::robot_control::GuiCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control::GuiCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.shape);
      stream.next(m.shape_mod);
      stream.next(m.obj);
      stream.next(m.args);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GuiCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control::GuiCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control::GuiCmd_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cmd);
    s << indent << "shape: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.shape);
    s << indent << "shape_mod: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.shape_mod);
    s << indent << "obj: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.obj);
    s << indent << "args: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.args);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MESSAGE_GUICMD_H
