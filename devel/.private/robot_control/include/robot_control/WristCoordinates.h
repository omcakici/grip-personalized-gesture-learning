// Generated by gencpp from file robot_control/WristCoordinates.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MESSAGE_WRISTCOORDINATES_H
#define ROBOT_CONTROL_MESSAGE_WRISTCOORDINATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_control/Vector3.h>
#include <robot_control/Vector3.h>
#include <robot_control/Vector3.h>

namespace robot_control
{
template <class ContainerAllocator>
struct WristCoordinates_
{
  typedef WristCoordinates_<ContainerAllocator> Type;

  WristCoordinates_()
    : world_coordinate()
    , world_coordinate_l()
    , from_origin_coordinate()  {
    }
  WristCoordinates_(const ContainerAllocator& _alloc)
    : world_coordinate(_alloc)
    , world_coordinate_l(_alloc)
    , from_origin_coordinate(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_control::Vector3_<ContainerAllocator>  _world_coordinate_type;
  _world_coordinate_type world_coordinate;

   typedef  ::robot_control::Vector3_<ContainerAllocator>  _world_coordinate_l_type;
  _world_coordinate_l_type world_coordinate_l;

   typedef  ::robot_control::Vector3_<ContainerAllocator>  _from_origin_coordinate_type;
  _from_origin_coordinate_type from_origin_coordinate;





  typedef boost::shared_ptr< ::robot_control::WristCoordinates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::WristCoordinates_<ContainerAllocator> const> ConstPtr;

}; // struct WristCoordinates_

typedef ::robot_control::WristCoordinates_<std::allocator<void> > WristCoordinates;

typedef boost::shared_ptr< ::robot_control::WristCoordinates > WristCoordinatesPtr;
typedef boost::shared_ptr< ::robot_control::WristCoordinates const> WristCoordinatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control::WristCoordinates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control::WristCoordinates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control::WristCoordinates_<ContainerAllocator1> & lhs, const ::robot_control::WristCoordinates_<ContainerAllocator2> & rhs)
{
  return lhs.world_coordinate == rhs.world_coordinate &&
    lhs.world_coordinate_l == rhs.world_coordinate_l &&
    lhs.from_origin_coordinate == rhs.from_origin_coordinate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control::WristCoordinates_<ContainerAllocator1> & lhs, const ::robot_control::WristCoordinates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_control::WristCoordinates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::WristCoordinates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::WristCoordinates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::WristCoordinates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::WristCoordinates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::WristCoordinates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control::WristCoordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5df8eb49232da68da5a9dda520808dda";
  }

  static const char* value(const ::robot_control::WristCoordinates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5df8eb49232da68dULL;
  static const uint64_t static_value2 = 0xa5a9dda520808ddaULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::WristCoordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control/WristCoordinates";
  }

  static const char* value(const ::robot_control::WristCoordinates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control::WristCoordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vector3 world_coordinate\n"
"Vector3 world_coordinate_l\n"
"Vector3 from_origin_coordinate\n"
"\n"
"================================================================================\n"
"MSG: robot_control/Vector3\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robot_control::WristCoordinates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control::WristCoordinates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.world_coordinate);
      stream.next(m.world_coordinate_l);
      stream.next(m.from_origin_coordinate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WristCoordinates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control::WristCoordinates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control::WristCoordinates_<ContainerAllocator>& v)
  {
    s << indent << "world_coordinate: ";
    s << std::endl;
    Printer< ::robot_control::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.world_coordinate);
    s << indent << "world_coordinate_l: ";
    s << std::endl;
    Printer< ::robot_control::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.world_coordinate_l);
    s << indent << "from_origin_coordinate: ";
    s << std::endl;
    Printer< ::robot_control::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.from_origin_coordinate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MESSAGE_WRISTCOORDINATES_H
